//
// Created by Liu QiXing on 2018/10/26.
//
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <time.h>
#include <algorithm>
#include <cmath>

#include "trustnote-miner-deposit.h"



/**
 *	private member variables
 */
static STPOWDEPOSIT _arrPowDepositTable[ TRUSTNOTE_MINER_DEPOSIT_TABLE_LENGTH ] =
{
	//
	//  nShift          		dblTimes         dblDeposit
	//
	{        0,                     0.000000,                    0.000000 },
	{        1,                     1.000000,          30000000000.000000 },
	{        2,                     3.000000,          38202161018.185852 },
	{        3,                     7.000000,          46030195932.873779 },
	{        4,                    15.000000,          54432882333.062027 },
	{        5,                    31.000000,          63858810897.144356 },
	{        6,                    63.000000,          74640781106.402908 },
	{        7,                   127.000000,          87087951142.879440 },
	{        8,                   255.000000,         101521983536.515121 },
	{        9,                   511.000000,         118297033135.030930 },
	{       10,                  1023.000000,         137814176434.535095 },
	{       11,                  2047.000000,         160534056566.707764 },
	{       12,                  4095.000000,         186989454243.641632 },
	{       13,                  8191.000000,         217798747753.075226 },
	{       14,                 16383.000000,         253680923247.848511 },
	{       15,                 32767.000000,         295472675401.549683 },
	{       16,                 65535.000000,         344148104230.712952 },
	{       17,                131071.000000,         400841528523.289673 },
	{       18,                262143.000000,         466873982940.745972 },
	{       19,                524287.000000,         543784036760.855286 },
	{       20,               1048575.000000,         633363664285.926880 },
	{       21,               2097151.000000,         737700009630.412720 },
	{       22,               4194303.000000,         859224023022.753418 },
	{       23,               8388607.000000,        1000767104161.312866 },
	{       24,              16777215.000000,        1165627073734.351074 },
	{       25,              33554431.000000,        1357645010976.756592 },
	{       26,              67108863.000000,        1581294747969.852295 },
	{       27,             134217727.000000,        1841787106085.583252 },
	{       28,             268435455.000000,        2145191303340.541260 },
	{       29,             536870911.000000,        2498576361424.641113 },
	{       30,            1073741823.000000,        2910175807103.695312 },
	{       31,            2147483647.000000,        3389579505408.867676 },
	{       32,            4294967295.000000,        3947957094157.070312 },
	{       33,            8589934591.000000,        4598318225618.916992 },
	{       34,           17179869183.000000,        5355815678716.971680 },
	{       35,           34359738367.000000,        6238098403975.948242 },
	{       36,           68719476735.000000,        7265722726829.316406 },
	{       37,          137438953471.000000,        8462631289918.824219 },
	{       38,          274877906943.000000,        9856710893275.216797 },
	{       39,          549755813887.000000,       11480442229511.734375 },
	{       40,         1099511627775.000000,       13371656652225.791016 },
	{       41,         2199023255551.000000,       15574417609573.289062 },
	{       42,         4398046511103.000000,       18140047279556.679688 },
	{       43,         8796093022207.000000,       21128322326625.937500 },
	{       44,        17592186044415.000000,       24608866639552.882812 },
	{       45,        35184372088831.000000,       28662773500010.542969 },
	{       46,        70368744177663.000000,       33384494976800.398438 },
	{       47,       140737488355327.000000,       38884042566766.937500 },
	{       48,       281474976710655.000000,       45289550355182.593750 },
	{       49,       562949953421311.000000,       52750260414735.578125 },
	{       50,      1125899906842623.000000,       61439999999999.992188 },
	{       51,      2251799813685247.000000,       71561231552621.921875 },
	{       52,      4503599627370495.000000,       83349769878384.953125 },
	{       53,      9007199254740991.000000,       97080276401771.765625 },
	{       54,     18014398509481984.000000,      113072658508784.640625 },
	{       55,     36028797018963968.000000,      131699523076459.703125 },
	{       56,     72057594037927936.000000,      153394857849030.062500 },
	{       57,    144115188075855872.000000,      178664142928319.781250 },
	{       58,    288230376151711744.000000,      208096127966214.656250 },
	{       59,    576460752303423488.000000,      242376549456287.968750 },
	{       60,   1152921504606846976.000000,      282304107724071.375000 },
	{       61,   2305843009213693952.000000,      328809075864234.937500 },
	{       62,   4611686018427387904.000000,      382974974194728.937500 },
	{       63,   9223372036854775808.000000,      446063815221490.937500 },
	{       64,  18446744073709551616.000000,      519545507296729.750000 }
};





/**
 *	initialize deposit table
 *
 *	@return	{int}
 */
int TrustNoteDeposit::initDepositTable()
{
	int i;
	int nShift;

	for ( i = 0; i < TRUSTNOTE_MINER_DEPOSIT_TABLE_LENGTH; i ++ )
	{
		nShift	= i;

		_arrPowDepositTable[ i ].nShift		= nShift;
		_arrPowDepositTable[ i ].dblTimes	= pow( 2, nShift ) - 1;
		_arrPowDepositTable[ i ].dblDeposit	= 10000.0 * 1000.0 * 1000.0 * ( 3 * pow( _arrPowDepositTable[ i ].dblTimes, 0.22 ) );

		if ( _arrPowDepositTable[ i ].dblDeposit > TRUSTNOTE_MINER_DEPOSIT_MAX_NOTES )
		{
			break;
		}
	}

	//	...
	return 0;
}


/**
 *	get deposit table
 *
 *	@return	{STPOWDEPOSIT *}
 */
STPOWDEPOSIT * TrustNoteDeposit::getDepositTable()
{
	return _arrPowDepositTable;
}


/**
 *	get shift by deposit
 *
 *	@param	{double}	dblDeposit	in Notes
 *	@return	{int}
 */
int TrustNoteDeposit::getShiftByDeposit( double dblDeposit )
{
	int nRet;
	int i;

	//	...
	nRet = TRUSTNOTE_MINER_DEPOSIT_DEFAULT_SHIFT;

	for ( i = TRUSTNOTE_MINER_DEPOSIT_TABLE_LENGTH - 1; i >= 0; i -- )
	{
		if ( dblDeposit >= _arrPowDepositTable[ i ].dblDeposit )
		{
			nRet = _arrPowDepositTable[ i ].nShift;
			break;
		}
	}

	return nRet;
}


/**
 *	check if a shift value is valid
 *
 *	@param	{int}	nShift
 *	@return	{boolean}
 */
bool TrustNoteDeposit::isValidShift( int nShift )
{
	return ( nShift >= TRUSTNOTE_MINER_DEPOSIT_MIN_SHIFT && nShift <= TRUSTNOTE_MINER_DEPOSIT_MAX_SHIFT );
}
